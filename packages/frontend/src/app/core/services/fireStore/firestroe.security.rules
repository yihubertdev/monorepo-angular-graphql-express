rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {
        function isLoggedIn(uid) {
            return request.auth != null && request.auth.uid == uid;
        }
        function isBelongToAdminOrEditor() {
            let role = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
            return role=="ADMIN" || role=="EDITOR";
        }

        function currentUserInfo() {
            return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        }

        function currentBlogInfo(blogId) {
            return get(/databases/$(database)/documents/blogs/$(blogId)).data;
        }

        match /users/{uid}	{
            allow read: if true;
            allow update, delete, create: if isLoggedIn(uid);
        }

        match /users/{uid}/{subCollectionId=**} {
            allow create, delete, get, read, list, update, write: if request.auth.uid == uid;
        }

        match /blogs/{blogId}	{
            allow read: if true;
            allow update, create: if request.auth != null && request.resource.data.userId == currentUserInfo().userId;
            allow delete: if currentBlogInfo(blogId).userId == currentUserInfo().userId;
        }
        match /article/{articleId} {
            allow read: if true;
            allow update, create: if request.auth != null && request.resource.data.userId == currentUserInfo().userId;
            allow delete: if currentBlogInfo(blogId).userId == currentUserInfo().userId;
        }
    }
}
